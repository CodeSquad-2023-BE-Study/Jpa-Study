# 기본키 매핑 전략

### 기본키 전략에는 Sequence, Identity, Table, Auto가 있다.

### 직접 할당 방식

사용자가 직접 값을 지정하는 방식, 관리가 어려울 수 있다.

### 자동 할당 방식

## Sequence

- 시퀀스는 데이터베이스에서 관리하는 고유한 값의 집합
- 시퀀스는 영속성 컨텍스트에 객체가 등록될 때 값을 가져온다.
- 따라서 persist → 데이터베이스의 시퀀스 조회 → 값 등록 → flush
- 이렇게하면 객체를 생성할때마다 DB 조회가 발생하므로 비효율적이다.
- 그래서 JPA에서는 allocation_size를 기본 50으로 지정하여 효율을 높인다.
- 객체를 생성할 때, 1~50까지 시퀀스를 만들고 메모리에서 1~50개를 카운트하는 방식.

### Identity

- Identity는 MySQL의 AUTO_INCREMENT 등 insert 시 자동으로 부여되는 번호이다.
- 시퀀스와 가장 큰 차이는 Identity 전략은 DB에 값을 insert해야 ID 값을 알 수 있다.
- 따라서 persist → flush → 반환된 ID 값을 객체에 등록
- DB에 값을 반영해야만 ID를 가져올 수 있기 때문에 트랜잭션을 지원하는 쓰기 지연이 불가능하다.
- persist와 동시에 객체를 플러시한다.

### Table

- 테이블은 거의 사용하지 않는다.
- 테이블에 시퀀스들을 관리하는 방법
- 테이블의 레코드로 시퀀스를 등록하여, 레코드 별로 next_val을 관리하기 때문에 전체 서비스에서 하나의 테이블로 시퀀싱을 할 수 있다.
- 조회할때는 select, 객체 생성 시에는 update로 값을 변경.

### Auto

- 데이터베이스에 맞춰서 매핑을 자동으로 지정해준다.
- MySQL의 경우 시퀀스가 없기 때문에 default가 identity이다.
- DB를 변경해도 코드 수정이 적다는 장점.
